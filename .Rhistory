knitr::opts_chunk$set(echo = TRUE)
library('Seurat')
library(tidyverse)
library(seurat)
library(Seurat)
library_directory <- '/well/fullerton/users/rxw025/analyses/skin/RNA-seq/Raw_data/Burja_10xsc/Count_matrices'
library('Seurat')
library(Seurat)
library(Seurat)
knitr::opts_chunk$set(echo = TRUE)
library(seurat)
library(tidyverse)
library(Seurat)
knitr::opts_chunk$set(echo = TRUE)
library(seurat)
library(Seurat)
library(Seurat)
library(seurat)
library(tidyverse)
library(thematic)
library(scales)
library(thematic)
library(seurat)
/exafs1/well/fullerton/users/rxw025/analyses/skin/RNA-seq/Processed_data/Burja_10xsc
knitr::opts_chunk$set(echo = TRUE)
skin.data <- readRDS(file = "/exafs1/well/fullerton/users/rxw025/analyses/skin/RNA-seq/Processed_data/Burja_10xsc/Burja_filtered_Seurat.Rds")
knitr::opts_chunk$set(echo = TRUE)
library(seurat)
library(Seurat)
knitr::opts_chunk$set(echo = TRUE)
setExperimentHubOption('cache', '/well/fullerton/users/rxw025/software/R/ExperimentHub')
library('ExperimentHub)
library('ExperimentHub')
library('SingleR')
setExperimentHubOption('cache', '/well/fullerton/users/rxw025/software/R/ExperimentHub')
MonacoImmuneData()
ahlers_Seurat <- readRDS(file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_clustered_Seurat.Rds")
celldex::MonacoImmuneData(localHub=TRUE)
setExperimentHubOption('localHub', TRUE)
setExperimentHubOption('LOCAL', TRUE)
celldex::HumanPrimaryCellAtlasData()
path.expand(rappdirs::user_cache_dir(appname="AnnotationHub"))
setAnnotationHubOption('cache', '/well/fullerton/users/rxw025/software/R/ExperimentHub')
celldex::MonacoImmuneData(localHub=TRUE)
HumanPrimaryCellAtlasData()
ahlers_Seurat <- readRDS(file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_clustered_Seurat.Rds")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(tidyverse)
library(scales)
library(thematic)
colour_sequence <- c("#35274A", "#F2300F")
thematic_on(
bg = "auto", fg = "auto", accent = "auto", font = NA,
sequential = colour_sequence, qualitative = okabe_ito()
)
show_col(colour_sequence)
theme_set(theme_bw() +
theme(axis.text = element_text(size = 10)))
ahlers_Seurat <- readRDS(file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_filtered_Seurat.Rds")
ahlers_Seurat <- FindVariableFeatures(ahlers_Seurat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(ahlers_Seurat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(ahlers_Seurat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 / plot2
# Run PCA on selected 2000 most variable features
ahlers_Seurat <- RunPCA(ahlers_Seurat, features = VariableFeatures(object = ahlers_Seurat))
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(SeuratDisk)
library(tidyverse)
library(sceasy)
library(scales)
library(thematic)
colour_sequence <- c("#35274A", "#F2300F")
thematic_on(
bg = "auto", fg = "auto", accent = "auto", font = NA,
sequential = colour_sequence, qualitative = okabe_ito()
)
show_col(colour_sequence)
theme_set(theme_bw() +
theme(axis.text = element_text(size = 10)))
# Samplesheet
samplesheet <- read_delim('/well/fullerton/projects/training/sc_rnaseq/ahlers_10x/metadata/scAhlers_samplesheet.csv')
# Define overall STARsolo output directory
STARsolo_output <- '/well/fullerton/projects/training/sc_rnaseq/ahlers_10x/nfcore/output_star/star/mtx_conversions'
# Define STARsolo output directory for each sample
samplesheet$STARsolo <- paste0(STARsolo_output, "/", samplesheet$sample, "/", samplesheet$sample, "_custom_emptydrops_filter_matrix.rds")
# Read in each sample's STARsolo output and assign to an individual Seurat object
ahlers_Seurat_list <- list()
for (i in 1:nrow(samplesheet)){
ahlers_Seurat_list[[i]] <- readRDS(samplesheet$STARsolo[[i]])
ahlers_Seurat_list[[i]]$orig.ident <- paste0(samplesheet$sample[[i]])
# assign(paste0(samplesheet$sample[[i]]), readRDS(samplesheet$STARsolo[[i]]))
}
# Percent mitochondrial - version of genome used doesn't include mito genes
# ahlers_Seurat[["percent.mt"]] <- PercentageFeatureSet(ahlers_Seurat, pattern = "^MT-")
# Percent ribosomal
for (i in 1:length(ahlers_Seurat_list)){
ahlers_Seurat_list[[i]][["percent.rb"]] <- PercentageFeatureSet(ahlers_Seurat_list[[i]], pattern = "^RP[SL]")
}
for (i in 1:length(ahlers_Seurat_list)){
ahlers_Seurat_list[[i]] <- subset(ahlers_Seurat_list[[i]],
subset = nFeature_RNA > 200 & nFeature_RNA < 7500)
}
for (i in 1:length(ahlers_Seurat_list)){
ahlers_Seurat_list[[i]] <- NormalizeData(ahlers_Seurat_list[[i]], normalization.method = "LogNormalize", scale.factor = 10000)
}
all.genes <- rownames(ahlers_Seurat_list[[1]])
for (i in 1:length(ahlers_Seurat_list)){
ahlers_Seurat_list[[i]] <- ScaleData(ahlers_Seurat_list[[i]], features = all.genes)
}
# Find variable features
for (i in 1:length(ahlers_Seurat_list)){
ahlers_Seurat_list[[i]] <- FindVariableFeatures(ahlers_Seurat_list[[i]], selection.method = "vst", nfeatures = 2000, verbose = F)
}
# Integrate
ahlers_anchors <- FindIntegrationAnchors(object.list = ahlers_Seurat_list, dims = 1:30)
ahlers_Seurat <- IntegrateData(anchorset = ahlers_anchors, dims = 1:30, new.assay.name = 'integrated')
ahlers_Seurat <- merge(x = ahlers_Seurat_list[[1]],
y = ahlers_Seurat_list[-1],
add.cell.ids = T)
# Set the active identity for plotting to the sample name
ahlers_Seurat <- SetIdent(ahlers_Seurat, value = "orig.ident")
metadata <- samplesheet %>% select(sample, age, site) %>%
mutate(sex = 'female')
add_data <- left_join(ahlers_Seurat[["orig.ident"]], metadata, by = join_by('orig.ident' == 'sample'))
row.names(add_data) <- row.names(ahlers_Seurat[[]])
ahlers_Seurat <- AddMetaData(ahlers_Seurat, metadata = add_data)
VlnPlot(ahlers_Seurat, features = c("nFeature_RNA", "nCount_RNA"), ncol = 3, flip = T)
# Cell counts
ahlers_Seurat@meta.data %>% as_tibble() %>% group_by(orig.ident) %>% summarise(n = n())
# Key metrics
ahlers_Seurat@meta.data %>% as_tibble(rownames = 'cell') %>%
pivot_longer(cols = c("nFeature_RNA", "nCount_RNA"), names_to = 'metric', values_to = 'value') %>%
ggplot(aes(x = value, y = orig.ident, color = metric)) +
geom_violin() +
geom_boxplot(outlier.fill = NA) +
facet_grid(cols = vars(metric), scale = 'free')
saveRDS(ahlers_Seurat, file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_filtered_Seurat.Rds")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(tidyverse)
library(scales)
library(thematic)
colour_sequence <- c("#35274A", "#F2300F")
thematic_on(
bg = "auto", fg = "auto", accent = "auto", font = NA,
sequential = colour_sequence, qualitative = okabe_ito()
)
show_col(colour_sequence)
theme_set(theme_bw() +
theme(axis.text = element_text(size = 10)))
ahlers_Seurat <- readRDS(file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_filtered_Seurat.Rds")
ahlers_Seurat <- FindVariableFeatures(ahlers_Seurat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(ahlers_Seurat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(ahlers_Seurat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 / plot2
# Run PCA on selected 2000 most variable features
ahlers_Seurat <- RunPCA(ahlers_Seurat, features = VariableFeatures(object = ahlers_Seurat))
ScaleData(ahlers_Seurat)
# Scale
ahlers_Seurat <- ScaleData(ahlers_Seurat)
# Run PCA on selected 2000 most variable features
ahlers_Seurat <- RunPCA(ahlers_Seurat, features = VariableFeatures(object = ahlers_Seurat))
# Run PCA on selected 2000 most variable features
ahlers_Seurat <- RunPCA(ahlers_Seurat, features = VariableFeatures(object = ahlers_Seurat))
# Inspect PCs
print(ahlers_Seurat[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(ahlers_Seurat, dims = 1:2, reduction = "pca")
# Test for elbow on plot
ElbowPlot(ahlers_Seurat, ndims = 40)
# Select appropriate number of PCs - go for 20 here
ahlers_Seurat <- FindNeighbors(ahlers_Seurat, dims = 1:20)
# The FindClusters() function implements this procedure, and contains a resolution parameter that sets the ‘granularity’ of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells.
# Here I'll use .25 (Ahlers used .2)
ahlers_Seurat <- FindClusters(ahlers_Seurat, resolution = 0.25, cluster.name = 'Unintegrated.clusters')
ahlers_Seurat <- RunUMAP(ahlers_Seurat, dims = 1:10, , reduction.name = "umap.unintegrated")
ahlers_Seurat <- RunUMAP(ahlers_Seurat, dims = 1:10, , reduction.name = "umap.integrated")
DimPlot(ahlers_Seurat,
reduction = "umap.integrated",
group.by = c('Integrated.clusters'),
ncol = 1) +
labs(title = "UMAP (integration)")
knitr::opts_chunk$set(echo = TRUE)
library(Seurat)
library(tidyverse)
library(scales)
library(thematic)
colour_sequence <- c("#35274A", "#F2300F")
thematic_on(
bg = "auto", fg = "auto", accent = "auto", font = NA,
sequential = colour_sequence, qualitative = okabe_ito()
)
show_col(colour_sequence)
theme_set(theme_bw() +
theme(axis.text = element_text(size = 10)))
ahlers_Seurat <- readRDS(file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_filtered_Seurat.Rds")
ahlers_Seurat <- FindVariableFeatures(ahlers_Seurat, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(ahlers_Seurat), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(ahlers_Seurat)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot1 / plot2
# Scale
ahlers_Seurat <- ScaleData(ahlers_Seurat)
# Run PCA on selected 2000 most variable features
ahlers_Seurat <- RunPCA(ahlers_Seurat, features = VariableFeatures(object = ahlers_Seurat))
# Inspect PCs
print(ahlers_Seurat[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(ahlers_Seurat, dims = 1:2, reduction = "pca")
# Test for elbow on plot
ElbowPlot(ahlers_Seurat, ndims = 40)
# Select appropriate number of PCs - go for 20 here
ahlers_Seurat <- FindNeighbors(ahlers_Seurat, dims = 1:20)
# The FindClusters() function implements this procedure, and contains a resolution parameter that sets the ‘granularity’ of the downstream clustering, with increased values leading to a greater number of clusters. We find that setting this parameter between 0.4-1.2 typically returns good results for single-cell datasets of around 3K cells.
# Here I'll use .25 (Ahlers used .2)
ahlers_Seurat <- FindClusters(ahlers_Seurat, resolution = 0.25, cluster.name = 'Integrated.clusters')
ahlers_Seurat <- RunUMAP(ahlers_Seurat, dims = 1:10, , reduction.name = "umap.integrated")
DimPlot(ahlers_Seurat,
reduction = "umap.integrated",
group.by = c('Integrated.clusters'),
ncol = 1) +
labs(title = "UMAP (integration)")
DimPlot(ahlers_Seurat,
reduction = "umap.integrated",
group.by = c('orig.ident'),
ncol = 1) +
labs(title = "UMAP (integration)")
DimPlot(ahlers_Seurat,
reduction = "umap.integrated",
group.by = c('age'),
ncol = 1) +
labs(title = "UMAP (integration)")
saveRDS(ahlers_Seurat, file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_clustered_Seurat.Rds")
knitr::opts_chunk$set(echo = TRUE)
library('ExperimentHub')
library('SingleR')
setExperimentHubOption('cache', '/well/fullerton/users/rxw025/software/R/ExperimentHub')
setAnnotationHubOption('cache', '/well/fullerton/users/rxw025/software/R/ExperimentHub')
setExperimentHubOption('LOCAL', TRUE)
#celldex::MonacoImmuneData(localHub=TRUE)
#celldex::HumanPrimaryCellAtlasData()
#celldex::DatabaseImmuneCellExpressionData()
#celldex::BlueprintEncodeData()
#celldex::ImmGenData()
#celldex::DatabaseImmuneCellExpressionData()
human_cell_atlas <- celldex::HumanPrimaryCellAtlasData()
ahlers_Seurat <- readRDS(file = "/well/fullerton/users/rxw025/analyses/skin/scRNA_skin/Processed_data/Ahlers_10xsc/Ahlers_clustered_Seurat.Rds")
ahlers_sce <- as.SingleCellExperiment(DietSeurat(srat))
ahlers_sce <- as.SingleCellExperiment(DietSeurat(ahlers_Seurat))
knitr::opts_chunk$set(echo = TRUE)
library('ExperimentHub')
library('ExperimentHub')
